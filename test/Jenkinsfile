#!groovy

def setGitHubBuildStatus(String status, String message, String context) {
    script {
        withCredentials([string(credentialsId: 'GitHub_API_Token',
                variable: 'api_token')]) {
            sh """
                curl -H "Authorization: token ${api_token}" \
                --request POST \
                --data '{ \
                    "state": "${status}", \
                    "description": "${message} on ${context}", \
                    "target_url": "$BUILD_URL", \
                    "context": "jenkins/${context}" \
                }' \
                https://api.github.com/repos/pace-neutrons/horace-euphonic-interface/statuses/${env.GIT_COMMIT}
            """
        }
    }
}

def getGitCommitAuthorEmail() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return sh(
            script: """
                echo "\$(\\
                    curl -s -H "Authorization: token ${api_token}" \\
                    --request GET https://api.github.com/repos/pace-neutrons/horace-euphonic-interface/git/commits/${env.GIT_COMMIT} |  jq '.author.email' | tr -d '"'\\
                )"
            """,
            returnStdout: true
        )
    }
}

def getGitCommitAuthorEmailWindows() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return powershell(
            script: """
                [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
                \$branch_details = Invoke-RestMethod -URI "https://api.github.com/repos/pace-neutrons/Euphonic/git/ref/heads/${env.JOB_BASE_NAME}" \
                    -Headers @{Authorization = "token ${api_token}"} \
                    -Method 'GET' \
                    -ContentType "application/json"
                \$latest_commit_url = \$branch_details.object.url
                \$commit_details = Invoke-RestMethod -URI "\$latest_commit_url" \
                    -Headers @{Authorization = "token ${api_token}"} \
                    -Method 'GET' \
                    -ContentType "application/json"
                \$commit_author_email = \$commit_details.author.email
                echo "\$commit_author_email"
            """,
            returnStdout: true
        )
    }
}

pipeline {

    agent { label env.AGENT }

    triggers {
        GenericTrigger(
             genericVariables: [
                [key: 'ref', value: '$.ref']
             ],

             causeString: 'Triggered on $ref',

             token: 'GitHub_API_Token',

             printContributedVariables: true,
             printPostContent: true,

             silentResponse: false,

             regexpFilterText: '$ref',
             regexpFilterExpression: 'refs/head/' + env.GIT_BRANCH
        )
        pollSCM('')
    }

    stages {

        stage("Notify") {
	    steps {
                script {
		    if (env.AGENT == 'sl7') {
                        setGitHubBuildStatus("pending", "Starting", "Linux")
                    } else if (!isUnix()){
                        checkout scm
		    }
                }
	    }
        }

        stage("Set up") {
            steps {
                script {
                    if (isUnix()) {
                        sh """
                            module load conda/3 &&
                            module load gcc &&
                            export CC=gcc
                            conda config --append channels free &&
                            conda create --name py python=3.6.0 -y &&
                            conda activate py &&
                            python -m pip install --upgrade --user pip &&
                            python -m pip install numpy &&
                            python -m pip install euphonic[phonopy_reader]
                        """
                    } else {
                        bat """
                            CALL conda create --name py python=3.6.0 -y
                            CALL conda activate py
                            python -m pip install --upgrade --user pip
                            python -m pip install numpy
                            python -m pip install euphonic[phonopy_reader]
                        """
		    }
                }
            }
        }

        stage("Test") {
            steps {
	        script {
		    if (isUnix()) {
                        sh """
                            module load matlab/\$MATLAB_VERSION &&
                            module load conda/3 &&
                            cd test &&
                            matlab -nosplash -nodesktop -batch "run('run_tests.m')"
                        """
		    } else {
                        bat """
                            CALL conda activate py
			    cd test
			    "C:\\Programming\\Matlab%MATLAB_VERSION%\\bin\\matlab.exe" -nosplash -nodesktop -wait -batch "run('run_tests.m')"
                        """
		    }
                }
            }
        }
    }

    post {

        success {
	    script {
                if (env.AGENT == 'sl7') {
                    script {
                        setGitHubBuildStatus("success", "Successful", "Linux")
                    }
                }
	    }
        }

        unsuccessful {
	    script {
                if (env.AGENT == 'sl7') {
                    setGitHubBuildStatus("failure", "Unsuccessful", "Linux")
                }
	    }
            script {
	        if (isUnix()) {
                    def email = getGitCommitAuthorEmail()
	        } else {
                    def email = getGitCommitAuthorEmailWindows()
	        }
                mail (
                    to: "$email",
                    subject: "Linux failed pipeline: ${env.JOB_BASE_NAME}",
                    body: "See ${env.BUILD_URL}"
                )
	    }
        }

        cleanup {
            deleteDir()
        }

    }
}
